configurations {
	jaxb
}

buildscript {
	repositories {
			maven {
				url 'http://artifactory.bnsf.com:8081/artifactory/plugins-release'
			}

	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

repositories {
			maven {
				url 'http://artifactory.bnsf.com:8081/artifactory/plugins-release'
			}

	}

// tag::wsdl[]
task genJaxb {
	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "http://wsf.cdyne.com/WeatherWS/Weather.asmx?wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "CCCR") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}
// end::wsdl[]

dependencies {
	compile("org.springframework.boot:spring-boot-starter")
	compile("org.springframework.ws:spring-ws-core")
	compile(files(genJaxb.classesDir).builtBy(genJaxb))
	
	jaxb "com.sun.xml.bind:jaxb-xjc:2.1.12"
	
	//Spring Boot dependency
	compile "org.springframework.boot:spring-boot-starter-web:1.0.2.RELEASE"
	compile "org.springframework.boot:spring-boot:1.0.2.RELEASE"
	compile "org.springframework.boot:spring-boot-starter-tomcat:1.0.2.RELEASE"
	

	//Embedded Tomcat core plugin
	compile "org.apache.tomcat.embed:tomcat-embed-core:7.0.52"
	compile "org.apache.tomcat:tomcat-jdbc:7.0.52"

}

jar {
	from genJaxb.classesDir
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.11'
}

task afterEclipseImport {
	dependsOn genJaxb
}
mainClassName = "hello.Application"